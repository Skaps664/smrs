// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  email             String              @unique
  password          String
  name              String
  role              UserRole            @default(STARTUP)
  phone             String?
  
  // Startup Founder specific
  currentStage      StartupStage?
  
  // Mentor specific
  mentorCompany     String?
  mentorLinkedin    String?
  mentorLocation    String?
  
  // Investor specific
  investorPortfolio String?
  investorLocation  String?
  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  startups          Startup[]
  mentorAccess      StartupMentorAccess[]
  investorAccess    StartupInvestorAccess[]
  invitesSent       InviteLink[]
}

enum UserRole {
  STARTUP
  MENTOR
  INVESTOR
}

model Startup {
  id                    String              @id @default(auto()) @map("_id") @db.ObjectId
  userId                String              @db.ObjectId
  user                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Basic Information
  name                  String
  founders              String[]
  industry              String
  niche                 String
  stage                 StartupStage        @default(IDEATION)
  
  // Registration Details
  secpRegistered        Boolean             @default(false)
  secpNumber            String?
  fbrRegistered         Boolean             @default(false)
  ntnNumber             String?
  trademarkFiled        Boolean             @default(false)
  trademarkNumber       String?
  
  // Brand Details
  vision                String?
  mission               String?
  tagline               String?
  logoUrl               String?
  bannerUrl             String?
  
  // Contact Details
  email                 String?
  phone                 String?
  address               String?
  website               String?
  
  // Extended Details
  headquarters          String?
  operationLocations    String[]            @default([])
  socialMediaLinks      Json?               // {linkedin, twitter, facebook, instagram, youtube, etc.}
  otherLinks            Json?               // {crunchbase, angellist, github, etc.}
  tipsAndTricks         String[]            @default([])
  
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  // Relations
  teamMembers           TeamMember[]
  weeklyTrackers        WeeklyTracker[]
  monthlyTrackers       MonthlyTracker[]
  kpis                  KPI[]
  milestones            Milestone[]
  documents             Document[]
  mentorFeedback        MentorFeedback[]
  valuePropositions     ValueProposition[]
  businessModels        BusinessModelCanvas[]
  mentorAccess          StartupMentorAccess?
  investorAccess        StartupInvestorAccess[]
  inviteLinks           InviteLink[]
}

model TeamMember {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  startupId             String    @db.ObjectId
  startup               Startup   @relation(fields: [startupId], references: [id], onDelete: Cascade)
  
  name                  String
  role                  String
  email                 String?
  phone                 String?
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  @@index([startupId])
}

enum StartupStage {
  IDEATION
  PROTOTYPE
  VALIDATION
  INCUBATION
  ACCELERATION
  GROWTH
  SCALE
}

model WeeklyTracker {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  startupId             String    @db.ObjectId
  startup               Startup   @relation(fields: [startupId], references: [id], onDelete: Cascade)
  
  weekNumber            Int
  month                 String
  year                  Int
  
  milestonesAchieved    String[]
  newActivities         String[]
  challenges            String[]
  actionsTaken          String[]
  nextGoals             String[]
  supportNeeded         String[]
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  @@index([startupId, year, month, weekNumber])
}

model MonthlyTracker {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  startupId             String    @db.ObjectId
  startup               Startup   @relation(fields: [startupId], references: [id], onDelete: Cascade)
  
  month                 String
  year                  Int
  
  summary               String
  keyAchievements       String[]
  majorChallenges       String[]
  lessonsLearned        String[]
  nextMonthPlans        String[]
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  @@index([startupId, year, month])
}

model KPI {
  id                    String      @id @default(auto()) @map("_id") @db.ObjectId
  startupId             String      @db.ObjectId
  startup               Startup     @relation(fields: [startupId], references: [id], onDelete: Cascade)
  
  date                  DateTime
  category              KPICategory
  
  // Marketing Metrics
  socialFollowers       Int?
  reach                 Int?
  engagementRate        Float?
  adSpend               Float?
  leadsGenerated        Int?
  
  // Sales & Financials
  ordersPlaced          Int?
  unitsSold             Int?
  revenue               Float?
  profitMargin          Float?
  customerReturnRate    Float?
  
  // Product Development
  featuresCompleted     Int?
  prototypesTested      Int?
  qaResults             String?
  
  // Operations
  suppliersOnboarded    Int?
  employeesAdded        Int?
  collaborators         Int?
  
  notes                 String?
  
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  
  @@index([startupId, date, category])
}

enum KPICategory {
  MARKETING
  SALES
  PRODUCT
  OPERATIONS
  GENERAL
}

model Milestone {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  startupId             String         @db.ObjectId
  startup               Startup        @relation(fields: [startupId], references: [id], onDelete: Cascade)
  
  stage                 StartupStage
  title                 String
  description           String?
  completed             Boolean        @default(false)
  completedDate         DateTime?
  criteria              String[]
  
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  
  @@index([startupId, stage])
}

model Document {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  startupId             String         @db.ObjectId
  startup               Startup        @relation(fields: [startupId], references: [id], onDelete: Cascade)
  
  name                  String
  category              DocumentCategory
  fileUrl               String
  fileSize              Int?
  fileType              String?
  
  expiryDate            DateTime?
  reminderSet           Boolean        @default(false)
  
  notes                 String?
  
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  
  @@index([startupId, category])
}

enum DocumentCategory {
  LEGAL
  FINANCIAL
  PITCH_DECK
  PRODUCT_PHOTOS
  CERTIFICATES
  CONTRACTS
  OTHER
}

model MentorFeedback {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  startupId             String    @db.ObjectId
  startup               Startup   @relation(fields: [startupId], references: [id], onDelete: Cascade)
  
  mentorName            String
  mentorEmail           String?
  
  meetingDate           DateTime
  meetingNotes          String
  feedback              String
  assignedTasks         String[]
  progressScore         Int?      // 1-10 scale
  
  // Section-specific feedback fields
  sectionId             String?   // e.g., "weekly-tracker", "kpi-dashboard", "business-model"
  sectionName           String?   // Human-readable section name
  rating                Int?      // 1-10 rating for the specific section
  suggestions           String?   // Specific suggestions for improvement
  
  // Read status
  isRead                Boolean   @default(false)
  readAt                DateTime?
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  @@index([startupId, meetingDate])
  @@index([startupId, sectionId])
}

model ValueProposition {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  startupId             String                  @db.ObjectId
  startup               Startup                 @relation(fields: [startupId], references: [id], onDelete: Cascade)
  
  // Version Information
  versionName           String                  // e.g., "Initial Canvas", "Pivot Version", "Q2 2025"
  versionNumber         Int                     @default(1)
  status                ValuePropositionStatus  @default(DRAFT)
  
  // Value Proposition Side
  gainCreators          String[]                // What creates gains for customers
  productsServices      String[]                // Core products/services offered
  painRelievers         String[]                // What relieves customer pains
  
  // Customer Segment Side
  customerGains         String[]                // Outcomes/benefits customers want
  customerPains         String[]                // Problems/frustrations customers face
  customerJobs          String[]                // Functional, social, emotional jobs customers need done
  
  // Additional Context
  notes                 String?
  targetAudience        String?                 // Who is this for
  
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  
  @@index([startupId, versionNumber])
  @@index([startupId, createdAt])
}

enum ValuePropositionStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

model BusinessModelCanvas {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  startupId             String                  @db.ObjectId
  startup               Startup                 @relation(fields: [startupId], references: [id], onDelete: Cascade)
  
  // Version Information
  versionName           String
  versionNumber         Int                     @default(1)
  status                BusinessModelStatus     @default(DRAFT)
  
  // The 9 Building Blocks of Business Model Canvas
  
  // 1. Customer Segments - Who are your customers?
  customerSegments      Json[]                  // [{ segment, description, size, demographics, psychographics }]
  
  // 2. Value Propositions - What value do you deliver?
  valuePropositions     Json[]                  // [{ proposition, problem, solution, uniqueness }]
  
  // 3. Channels - How do you reach customers?
  channels              Json[]                  // [{ channel, phase, type, direct }]
  
  // 4. Customer Relationships - How do you interact with customers?
  customerRelationships Json[]                  // [{ type, description, strategy, automation }]
  
  // 5. Revenue Streams - How do you make money?
  revenueStreams        Json[]                  // [{ stream, type, pricingModel, frequency }]
  
  // 6. Key Resources - What assets are essential?
  keyResources          Json[]                  // [{ resource, type, ownership, importance }]
  
  // 7. Key Activities - What key actions drive the business?
  keyActivities         Json[]                  // [{ activity, category, frequency, owner }]
  
  // 8. Key Partnerships - Who helps you succeed?
  keyPartnerships       Json[]                  // [{ partner, type, value, relationship }]
  
  // 9. Cost Structure - What are your major costs?
  costStructure         Json[]                  // [{ cost, type, fixed, frequency, importance }]
  
  // Additional Information
  notes                 String?
  targetMarket          String?
  completionPercentage  Int?                    @default(0)
  
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  
  @@index([startupId, versionNumber])
  @@index([startupId, status])
}

enum BusinessModelStatus {
  DRAFT
  ACTIVE
  ARCHIVED
  TESTING
}

model StartupMentorAccess {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  startupId             String    @unique @db.ObjectId
  startup               Startup   @relation(fields: [startupId], references: [id], onDelete: Cascade)
  
  mentorId              String    @db.ObjectId
  mentor                User      @relation(fields: [mentorId], references: [id], onDelete: Cascade)
  
  joinedAt              DateTime  @default(now())
  
  @@index([mentorId])
}

model StartupInvestorAccess {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  startupId             String    @db.ObjectId
  startup               Startup   @relation(fields: [startupId], references: [id], onDelete: Cascade)
  
  investorId            String    @db.ObjectId
  investor              User      @relation(fields: [investorId], references: [id], onDelete: Cascade)
  
  joinedAt              DateTime  @default(now())
  
  @@index([startupId])
  @@index([investorId])
}

model InviteLink {
  id                    String        @id @default(auto()) @map("_id") @db.ObjectId
  startupId             String        @db.ObjectId
  startup               Startup       @relation(fields: [startupId], references: [id], onDelete: Cascade)
  
  createdById           String        @db.ObjectId
  createdBy             User          @relation(fields: [createdById], references: [id], onDelete: Cascade)
  
  inviteType            InviteType
  token                 String        @unique
  email                 String?       // Optional: for targeted invites
  
  expiresAt             DateTime
  usedAt                DateTime?
  usedBy                String?       // Email of user who used it
  
  isActive              Boolean       @default(true)
  
  createdAt             DateTime      @default(now())
  
  @@index([startupId])
  @@index([expiresAt])
}

enum InviteType {
  MENTOR
  INVESTOR
}
